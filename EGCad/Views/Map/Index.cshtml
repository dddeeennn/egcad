@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="page-header">
    <h2>Ввод и масштабирование карты</h2>
</div>
<div class="form-horizontal">
    <div class="form-group">
        <div class="col-sm-7 col-lg-5">
            <form action='@Url.Action("load")' id="upload" method="post" enctype="multipart/form-data">
                <div class="form-group">
                    <div style="display: table;margin-left: 10px;">
                        <span class=" bold" style="display: table-cell; padding: 7px;">Расстояние между точками :</span>
                        <span style="display: table-cell; padding: 7px;">
                            <span id="editable" class="input-group">
                                <input id="endPoint" placeholder="100" type="number" class="form-control">
                                <span id="save" class="input-group-addon btn glyphicon glyphicon-ok"></span>
                            </span>
                        </span>
                        <span style="display: table-cell;padding: 7px;"> метров.</span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-5">
                        <span style="margin-right:10px; ">
                            <input type="file" name="map" id="map" accept="image/*" title="Загрузите карту *.jpg / *.png" />
                        </span>
                    </div>
                </div>
            </form>
        </div>
        <div class="col-sm-1 pull-right">
            <a href="@Url.Action("Index","Parameters")" id="nextStep" class="btn btn-default inactive pull-right">Далее</a>
        </div>
        <div class="col-sm-4 pull-right">
            <div class="well">
                <div class="h4">Выполните следующие действия:</div>
                <div id="loadMapStep">
                    <i class="fa fa-check "></i><span>Загрузите изображение</span>
                </div>
                <div id="specifyStartStep">
                    <i class="fa fa-check "></i><span>Укажите на карте стартовую точку (обозначена зеленым)</span>
                </div>
                <div id="specifyEndStep">
                    <i class="fa fa-check "></i><span>Укажите на карте конечную точку (обозначена красным)</span>
                </div>
                <div id="specifyLengthStep">
                    <i class="fa fa-check "></i><span>Введите n  в поле и сохраните</span>
                </div>
                <div>
                    <div class="progress ">
                        <div class="progress-bar active" role="progressbar" aria-valuenow="1" aria-valuemin="0" aria-valuemax="100" style="width: 1%;">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="form-group col-sm-12">
        <canvas id="tip" width=100 height=25></canvas>
        <canvas width="400px" height="200px" id="map-container">
            Здесь должна быть отображена загруженная карта.
            Для работы с приложением обновите браузер.
            Минимальная поддерживаемая версия браузеров:
            Internet Explorer 10+, 	Google Chrome 38+
        </canvas>
    </div>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        var container = $('#main');
        var imgOffset = 45,
			tipCanvas = document.getElementById('tip'),
			tipCtx = tipCanvas.getContext('2d'),
			pointRadius = 4,
			startPoint, endPoint;

        var sender = new egcad.Data.Sender();

        sender.get("GetState", '@Url.Action("GetState","Map")', {},
             function (response) {
                 if (response && response.statusCode == 0) {
                     if (response.data.Map) {
                         var map = response.data.Map;
                         refreshStatus(map);
                     }
                 }
             });

        container.find('input[type=file]').bootstrapFileInput();
        container.find('input[type=file]')[0].onchange = function (e) {
            $('#upload').trigger('submit');
        };

        $('#upload').submit(function (e) {
            sender.post("UploadMap", '@Url.Action("Load","Map")', {},
				function (response) {
				    if (response && response.statusCode == 0) {
				        // clear form and initialize

				        var form = container.find('#upload');
				        form.find('.file-input-name').empty('');
				        form.find('input[type="file"]').val('');

				        var map = response.data.Map;

				        refreshStatus(map);
				    }

				    if (response.statusCode == 2) {
				        setStatus("#loadMapStep", "error");
				        alert('Ошибка при загрузке карты!' + response.data.message);
				    }
				},
				function (request, status, error) {
				    setStatus("#loadMapStep", "error");
				}, {
				    data: new FormData(this),
				    processData: false,
				    contentType: false,
				});
            e.preventDefault();
        });

        container.find('#editable').on('keypress', function (event) {
            if (event.which == 13) {
                event.preventDefault();
                saveEndPointLength();
            }
        });

        container.find("#editable #save").on("click", saveEndPointLength);

        function initCanvas(map) {
            if (!map.Image) return;

            var width = map.Image.Size.Width;
            var height = map.Image.Size.Height;

            var img = new Image(width, height);
            img.src = map.ImgSrc;
            img.onload = function () {
                var canvas = $('#map-container')[0];
                canvas.width = width + 2 * imgOffset;
                canvas.height = height + 2 * imgOffset;

                var ctx = canvas.getContext('2d');
                ctx.drawImage(img, imgOffset, imgOffset, width, height);

                $('#map-container').off();
                $(canvas).on('mousedown', function (event) {
                    var x = event.clientX;
                    var y = event.clientY;

                    x -= canvas.getBoundingClientRect().left;
                    y -= canvas.getBoundingClientRect().top;

                    if (x > imgOffset && x < (canvas.width - imgOffset) &&
                    (y > imgOffset && y < (canvas.height - imgOffset))) {
                        pointHandle(x, y);
                    }
                });

                $(canvas).mousemove(function (e) { handleMouseMove(e, $(this)[0]); });

                drawScale(ctx, Math.ceil(width / 10), 10, 15, 30);

                if (map.ScaleKoef > 0) drawScaleText(ctx, map.ScaleKoef, Math.ceil(width / 10), 10, 15, 30);

                if (!map.Start.IsEmpty) drawPoint(ctx, map.Start.X, map.Start.Y, '#afa', '#0f0'); //start

                startPoint = {
                    x: map.Start.X,
                    y: map.Start.Y,
                    text: map.StartT.X + ', ' + map.StartT.Y,
                    r: pointRadius
                };

                if (!map.End.IsEmpty) drawPoint(ctx, map.End.X, map.End.Y, '#faa', '#f00'); //end

                if (!map.EndT.IsEmpty) {
                    endPoint = {
                        x: map.End.X,
                        y: map.End.Y,
                        text: map.EndT.X + ', ' + map.EndT.Y,
                        r: pointRadius
                    };
                }

            };
        }

        // show tooltip when mouse hovers over dot
        function handleMouseMove(e, canvas) {

            var x = e.clientX - canvas.getBoundingClientRect().left,
				y = e.clientY - canvas.getBoundingClientRect().top;

            //   console.log(x + ', ' + y);

            if (startPoint && endPoint) {
                handleMouseMoveOnPoint([startPoint, endPoint], x, y);
                return;
            }

            if (endPoint) {
                handleMouseMoveOnPoint([endPoint], x, y);
                return;
            }
            if (startPoint) {
                handleMouseMoveOnPoint([startPoint], x, y);
                return;
            }
        }

        function handleMouseMoveOnPoint(dots, mouseX, mouseY) {
            var hit = false;
            for (var i = 0; i < dots.length; i++) {
                var point = dots[i];
                var dx = mouseX - point.x;
                var dy = mouseY - point.y;
                if (dx * dx + dy * dy < point.r * point.r) {
                    tipCanvas.style.left = (point.x) + "px";
                    tipCanvas.style.top = (point.y - 40) + "px";
                    tipCtx.clearRect(0, 0, tipCanvas.width, tipCanvas.height);
                    tipCtx.fillText(point.text, 5, 15);
                    hit = true;
                }
                if (!hit) {
                    tipCanvas.style.left = "-1200px";
                }
            }
        }

        function pointHandle(x, y) {
            var modal = new Modal();
            modal.setTitle('Сохранить точку');
            modal.getContentElement().append('Выберите тип точки');
            modal.setButtons([
				{
				    label: 'Начальная',
				    cssClass: 'btn',
				    callback: function () {
				        sendPointData(x, y, true);
				        modal.hide();
				        modal.destroy();
				    }
				},
				{
				    label: 'Конечная',
				    cssClass: 'btn',
				    callback: function () {
				        sendPointData(x, y, false);
				        modal.hide();
				        modal.destroy();
				    }
				},
				{
				    label: 'Закрыть',
				    cssClass: 'btn',
				    callback: function () {
				        modal.hide();
				        modal.destroy();
				    }
				}
            ]);
            modal.show();
        }

        /*
		* x,y - coords,
		* pointType=true is start point
		* pointType=false is end point
		*/
        function sendPointData(x, y, pointType) {
            sender.get("savePointCoords", '@Url.Action("SavePoint")', { x: x, y: y, pointType: pointType },
				function (response) {
				    if (response && response.statusCode == 0) {
				        refreshStatus(response.data.Map);
				    } else {
				        setStatus("#specifyStartStep", 'error');
				        setStatus("#specifyEndStep", 'error');
				    }
				},
				function () {
				    setStatus("#specifyStartStep", 'error');
				    setStatus("#specifyEndStep", 'error');
				},
				{});
        }

        function saveEndPointLength() {
            var value = container.find('#endPoint').val();

            if (!value) return;

            sender.get("saveEndPoint", '@Url.Action("EndpointLength")', { x: value },
				function (response) {
				    if (response && response.statusCode == 0) {
				        refreshStatus(response.data.Map);
				    } else {
				        setStatus("#specifyLengthStep", 'error');
				    }
				},
				function () {
				    setStatus("#specifyLengthStep", 'error');
				},
				{});
        };

        function drawPoint(context, centerX, centerY, color, strokeColor) {
            context.beginPath();
            context.arc(centerX, centerY, pointRadius, 0, 2 * Math.PI, false);
            context.fillStyle = color;
            context.fill();
            context.lineWidth = 1;
            context.strokeStyle = strokeColor;
            context.stroke();
        }

        function drawScale(ctx, tileLength, tileCount, thickness, offset) {
            for (var i = 0; i < tileCount; i++) {
                if (i % 2 == 0) {
                    ctx.fillRect(thickness + offset + tileLength * i, offset, tileLength, thickness);
                    ctx.strokeRect(thickness + offset + tileLength * i, offset, tileLength, thickness);
                    ctx.fillRect(offset, thickness + offset + tileLength * i, thickness, tileLength);
                    ctx.strokeRect(offset, thickness + offset + tileLength * i, thickness, tileLength);
                } else {
                    ctx.rect(thickness + offset + tileLength * i, offset, tileLength, thickness);
                    ctx.rect(offset, thickness + offset + tileLength * i, thickness, tileLength);
                    ctx.stroke();
                }
            }
        }

        function drawScaleText(ctx, scale, tileLength, tileCount, thickness, offset) {
            var scaleText = Math.round(scale * tileLength);
            var alignKoef = thickness + offset; //align scale text
            for (var i = 1; i < tileCount; i++) {
                ctx.fillText(scaleText * (i - 1), alignKoef + tileLength * i, offset * 3 / 4);
                ctx.fillText(scaleText * (i - 1), offset / 6, alignKoef + tileLength * i);
            }
        }

        function refreshStatus(map) {
            initCanvas(map);
            $('#endPoint').val(map.EndT.X);
            var $btn = container.find('#nextStep');

            if (map.IsValid) {
                $btn.removeClass('btn-default inactive').addClass('btn-success');
            } else {
                $btn.removeClass('btn-success').addClass('btn-default inactive');
            }

            container.find('#loadMapStep').attr('class', map.Image ? 'ok' : 'error');
            container.find('#specifyStartStep').attr('class', !map.Start.IsEmpty ? 'ok' : 'error');
            container.find('#specifyEndStep').attr('class', !map.End.IsEmpty ? 'ok' : 'error');
            container.find('#specifyLengthStep').attr('class', !map.EndT.IsEmpty ? 'ok' : 'error');

            var $progressBar = $('.progress-bar');
            var $completeState = (($('.ok', '.well')).length / 4) * 100;

            if ($completeState > 99) {
                $progressBar.addClass('progress-bar-success').removeClass('progress-bar-danger');
            }
            $progressBar.width(Math.round($completeState) + '%');
        }

        function setStatus(selector, clazz) {
            container.find(selector).attr('class', clazz);
        }
    });
</script>